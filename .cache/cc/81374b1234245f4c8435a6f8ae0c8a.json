{"id":"uXwq","dependencies":[{"name":"/project/TypeScript-Ecosystem-Game/tsconfig.json","includedInParent":true,"mtime":1683654674051},{"name":"/project/TypeScript-Ecosystem-Game/package.json","includedInParent":true,"mtime":1683828163988}],"generated":{"js":"\"use strict\";function e(e,r,t,o){for(var a=Number.MAX_VALUE,l=null,n=0;n<t.length;n++)for(var s=0;s<t[n].length;s++){var f=t[n][s];if(f&&o(f)){var i=Math.sqrt(Math.pow(n-e,2)+Math.pow(s-r,2));i<a&&(a=i,l=f)}}return l}Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.findNearestCell=void 0,exports.findNearestCell=e;"},"sourceMaps":{"js":{"mappings":[{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":0}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":13}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":4,"column":16},"generated":{"line":1,"column":22}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":5,"column":2},"generated":{"line":1,"column":24}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":6,"column":2},"generated":{"line":1,"column":26}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":7,"column":2},"generated":{"line":1,"column":28}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":8,"column":2},"generated":{"line":1,"column":30}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":13,"column":2},"generated":{"line":1,"column":33}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":10,"column":2},"generated":{"line":1,"column":37}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":10,"column":6},"generated":{"line":1,"column":41}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":10,"column":20},"generated":{"line":1,"column":43}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":10,"column":27},"generated":{"line":1,"column":50}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":11,"column":6},"generated":{"line":1,"column":60}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":11,"column":33},"generated":{"line":1,"column":62}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":13,"column":11},"generated":{"line":1,"column":67}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":13,"column":15},"generated":{"line":1,"column":69}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":13,"column":18},"generated":{"line":1,"column":71}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":13,"column":22},"generated":{"line":1,"column":73}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":13,"column":28},"generated":{"line":1,"column":75}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":13,"column":36},"generated":{"line":1,"column":82}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":14,"column":4},"generated":{"line":1,"column":86}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":14,"column":9},"generated":{"line":1,"column":90}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":14,"column":13},"generated":{"line":1,"column":94}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":14,"column":17},"generated":{"line":1,"column":96}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":14,"column":20},"generated":{"line":1,"column":98}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":14,"column":24},"generated":{"line":1,"column":100}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":14,"column":30},"generated":{"line":1,"column":102}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":14,"column":33},"generated":{"line":1,"column":105}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":14,"column":41},"generated":{"line":1,"column":112}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":14,"column":46},"generated":{"line":1,"column":116}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":15,"column":6},"generated":{"line":1,"column":117}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":15,"column":12},"generated":{"line":1,"column":121}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":15,"column":19},"generated":{"line":1,"column":123}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":15,"column":25},"generated":{"line":1,"column":125}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":15,"column":28},"generated":{"line":1,"column":128}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":17,"column":6},"generated":{"line":1,"column":131}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":17,"column":10},"generated":{"line":1,"column":134}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":17,"column":18},"generated":{"line":1,"column":137}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":17,"column":27},"generated":{"line":1,"column":139}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":17,"column":34},"generated":{"line":1,"column":142}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":19,"column":8},"generated":{"line":1,"column":143}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":19,"column":14},"generated":{"line":1,"column":147}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":19,"column":25},"generated":{"line":1,"column":149}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":19,"column":30},"generated":{"line":1,"column":154}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":19,"column":35},"generated":{"line":1,"column":159}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":19,"column":35},"generated":{"line":1,"column":164}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":19,"column":36},"generated":{"line":1,"column":168}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":19,"column":40},"generated":{"line":1,"column":170}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":19,"column":46},"generated":{"line":1,"column":172}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":19,"column":50},"generated":{"line":1,"column":175}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":19,"column":50},"generated":{"line":1,"column":180}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":19,"column":51},"generated":{"line":1,"column":184}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":19,"column":55},"generated":{"line":1,"column":186}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":19,"column":61},"generated":{"line":1,"column":188}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":20,"column":12},"generated":{"line":1,"column":192}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":20,"column":23},"generated":{"line":1,"column":194}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":21,"column":10},"generated":{"line":1,"column":198}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":21,"column":24},"generated":{"line":1,"column":200}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":22,"column":10},"generated":{"line":1,"column":202}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":22,"column":24},"generated":{"line":1,"column":204}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":27,"column":2},"generated":{"line":1,"column":208}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":27,"column":9},"generated":{"line":1,"column":215}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":217}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":224}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":239}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":247}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":260}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":261}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":268}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":272}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":280}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":301}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":303}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":311}},{"source":"src/util/findNearestCell.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":327}}],"sources":{"src/util/findNearestCell.ts":"import { Cell } from \"../types/Cell\";\r\n\r\n// function created by chatgpt and updated with a criteria function and types\r\nexport function findNearestCell(\r\n  x: number,\r\n  y: number,\r\n  array: Cell[][],\r\n  criteria: (cell: Cell) => boolean\r\n): Cell | null {\r\n  let minDistance = Number.MAX_VALUE;\r\n  let nearestCell: Cell | null = null;\r\n\r\n  for (let i = 0; i < array.length; i++) {\r\n    for (let j = 0; j < array[i].length; j++) {\r\n      const cell = array[i][j];\r\n      // ensure cell meets criteria before calculating distance (ex: cell contains water)\r\n      if (cell && criteria(cell)) {\r\n        // calculate Euclidean distance\r\n        const distance = Math.sqrt((i - x) ** 2 + (j - y) ** 2);\r\n        if (distance < minDistance) {\r\n          minDistance = distance;\r\n          nearestCell = cell;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return nearestCell;\r\n}\r\n"},"lineCount":null}},"error":null,"hash":"88dfe48cec4a4582102e235561f4e3d0","cacheData":{"env":{}}}